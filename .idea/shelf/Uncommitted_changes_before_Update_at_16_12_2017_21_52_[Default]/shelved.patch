Index: RCSnail-LSTM.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Import stuff and initialize global parameters.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Using TensorFlow backend.\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import cv2\\n\",\n    \"import numpy as np\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"\\n\",\n    \"from keras.layers import Conv2D, Flatten, Dense, LSTM, \\\\\\n\",\n    \"    MaxPooling2D\\n\",\n    \"from keras.models import Sequential\\n\",\n    \"from common import extract_training_data\\n\",\n    \"\\n\",\n    \"IMAGE_SIZE = (64, 64, 3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# LSTM network\\n\",\n    \"Reading data and creating initial model.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"images, labels = extract_training_data(\\\"Data/20171029-201949.h264.avi\\\", \\\"Data/20171029-201949.h264.csv\\\", IMAGE_SIZE)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(1744, 3)\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"y_train = labels.as_matrix(columns=labels.columns[1: -1])\\n\",\n    \"y_train.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(1744, 64, 64, 3)\"\n      ]\n     },\n     \"execution_count\": 4,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"images.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"_________________________________________________________________\\n\",\n      \"Layer (type)                 Output Shape              Param #   \\n\",\n      \"=================================================================\\n\",\n      \"conv2d_1 (Conv2D)            (None, 62, 62, 32)        896       \\n\",\n      \"_________________________________________________________________\\n\",\n      \"max_pooling2d_1 (MaxPooling2 (None, 31, 31, 32)        0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"permute_1 (Permute)          (None, 32, 31, 31)        0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"reshape_1 (Reshape)          (None, 4, 7688)           0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"lstm_1 (LSTM)                (None, 64)                1984768   \\n\",\n      \"_________________________________________________________________\\n\",\n      \"dense_1 (Dense)              (None, 3)                 195       \\n\",\n      \"=================================================================\\n\",\n      \"Total params: 1,985,859\\n\",\n      \"Trainable params: 1,985,859\\n\",\n      \"Non-trainable params: 0\\n\",\n      \"_________________________________________________________________\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from keras.layers import Permute, Reshape\\n\",\n    \"\\n\",\n    \"def create_model():\\n\",\n    \"    model = Sequential()\\n\",\n    \"    model.add(Conv2D(32, (3, 3), kernel_initializer=\\\"he_normal\\\", activation='relu', input_shape=(64, 64, 3)))\\n\",\n    \"    model.add(MaxPooling2D((2, 2)))\\n\",\n    \"    model.add(Permute((3, 2, 1)))\\n\",\n    \"    model.add(Reshape((4, 7688)))\\n\",\n    \"    model.add(LSTM(64, return_sequences=False))\\n\",\n    \"    model.add(Dense(3, activation='linear'))\\n\",\n    \"\\n\",\n    \"    model.compile(loss=\\\"mse\\\", optimizer=\\\"adam\\\")\\n\",\n    \"    \\n\",\n    \"    return model\\n\",\n    \"\\n\",\n    \"model = create_model()\\n\",\n    \"model.summary()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### LSTM network results\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Train on 1674 samples, validate on 70 samples\\n\",\n      \"Epoch 1/10\\n\",\n      \"1674/1674 [==============================] - 3s - loss: 0.3055 - val_loss: 0.2688\\n\",\n      \"Epoch 2/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0895 - val_loss: 0.2594\\n\",\n      \"Epoch 3/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0780 - val_loss: 0.2760\\n\",\n      \"Epoch 4/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0707 - val_loss: 0.2624\\n\",\n      \"Epoch 5/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0663 - val_loss: 0.2760\\n\",\n      \"Epoch 6/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0613 - val_loss: 0.2769\\n\",\n      \"Epoch 7/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0576 - val_loss: 0.2808\\n\",\n      \"Epoch 8/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0556 - val_loss: 0.2780\\n\",\n      \"Epoch 9/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0543 - val_loss: 0.2779\\n\",\n      \"Epoch 10/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0497 - val_loss: 0.2891\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"history = model.fit(images, y_train, batch_size=64, epochs=10, validation_split=0.04)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"test_images, test_labels = extract_training_data(\\\"Data/20171029-201639.h264.avi\\\", \\n\",\n    \"                                                            \\\"Data/20171029-201639.h264.csv\\\", \\n\",\n    \"                                                            IMAGE_SIZE)\\n\",\n    \"\\n\",\n    \"prediction = model.predict(test_images)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([[ 0.33686137,  0.12799484,  0.95844716],\\n\",\n       \"       [ 0.37755403,  0.10497643,  0.94694453],\\n\",\n       \"       [ 0.35190707,  0.11263372,  0.95089626],\\n\",\n       \"       ..., \\n\",\n       \"       [-0.35214299,  0.00862575,  0.98164457],\\n\",\n       \"       [-0.32364139, -0.03065464,  1.00149977],\\n\",\n       \"       [-0.23717432,  0.03360973,  0.98100537]], dtype=float32)\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"prediction\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\npMb9L8CCs3/BGVsxAAAAAElFTkSuQmCC\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x12652730e48>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(prediction[:, 0])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\nMeBSAAAAAElFTkSuQmCC\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x127e7edc860>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(prediction[:, 1])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x127e7c5b1d0>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(prediction[:, 2])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(942, 3)\\n\",\n      \"(942, 3)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"validation_labels = test_labels.as_matrix(columns=test_labels.columns[1: -1])\\n\",\n    \"clipped_prediction = np.zeros_like(prediction)\\n\",\n    \"\\n\",\n    \"clipped_prediction[:, 0] = np.clip(prediction[:, 0], -1, 1)\\n\",\n    \"clipped_prediction[:, 1] = np.clip(prediction[:, 1], 0, 1)\\n\",\n    \"clipped_prediction[:, 2] = np.clip(prediction[:, 2], 0, 1)\\n\",\n    \"\\n\",\n    \"print(validation_labels.shape)\\n\",\n    \"print(clipped_prediction.shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.1108657072559897\"\n      ]\n     },\n     \"execution_count\": 13,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sklearn.metrics import explained_variance_score\\n\",\n    \"explained_variance_score(validation_labels, prediction)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## K fold cross validation\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Currently the model is just a copy of what is above, defined as a function for the KerasRegressor wrapper\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[-0.1026516   0.04183956  0.18578287  0.29401657  0.00615382  0.17690809\\n\",\n      \"  0.16321612  0.21082882  0.08599226  0.066355  ]\\n\",\n      \"0.112844150141\\n\",\n      \"0.124604190153\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from common import run_kfold_cross_val\\n\",\n    \"\\n\",\n    \"# Concatenate both videos\\n\",\n    \"total_images = np.concatenate((images, test_images), axis=0)\\n\",\n    \"total_labels = np.concatenate((labels, test_labels), axis=0)\\n\",\n    \"\\n\",\n    \"total_y_train = total_labels[:, 1:-1]\\n\",\n    \"\\n\",\n    \"results = run_kfold_cross_val(create_model, total_images, total_y_train)\\n\",\n    \"print(results)\\n\",\n    \"print(results.mean())\\n\",\n    \"print(np.median(results))\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.5.4\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- RCSnail-LSTM.ipynb	(revision f8a1551840823bede6bdf3c6ed171274a5b2554f)
+++ RCSnail-LSTM.ipynb	(date 1513453832194)
@@ -45,12 +45,36 @@
   {
    "cell_type": "code",
    "execution_count": 2,
-   "metadata": {
-    "collapsed": true
-   },
-   "outputs": [],
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(1543, 6)"
+      ]
+     },
+     "execution_count": 2,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
-    "images, labels = extract_training_data(\"Data/20171029-201949.h264.avi\", \"Data/20171029-201949.h264.csv\", IMAGE_SIZE)"
+    "video_names = [\"20171211-182708258.h264\",\n",
+    "             \"20171211-183607508.h264\",\n",
+    "             \"20171211-184640781.h264\",\n",
+    "             \"20171211-185037299.h264\",\n",
+    "             \"20171211-191157767.h264\"\n",
+    "              ]\n",
+    "\n",
+    "csv_names = [\"20171211-182708258.csv\",\n",
+    "             \"20171211-183607508.csv\",\n",
+    "             \"20171211-184640781.csv\",\n",
+    "             \"20171211-185037299.csv\",\n",
+    "             \"20171211-191157767.csv\"\n",
+    "            ]\n",
+    "\n",
+    "images, labels = extract_training_data(\"Data/20171211-191157767.h264\", \"Data/20171211-191157767.csv\", IMAGE_SIZE)\n",
+    "labels.shape"
    ]
   },
   {
@@ -61,7 +85,7 @@
     {
      "data": {
       "text/plain": [
-       "(1744, 3)"
+       "(1543, 3)"
       ]
      },
      "execution_count": 3,
@@ -70,7 +94,7 @@
     }
    ],
    "source": [
-    "y_train = labels.as_matrix(columns=labels.columns[1: -1])\n",
+    "y_train = labels.as_matrix(columns=labels.columns[2: -1])\n",
     "y_train.shape"
    ]
   },
@@ -82,7 +106,7 @@
     {
      "data": {
       "text/plain": [
-       "(1744, 64, 64, 3)"
+       "(1543, 64, 64, 3)"
       ]
      },
      "execution_count": 4,
@@ -161,32 +185,52 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Train on 1674 samples, validate on 70 samples\n",
-      "Epoch 1/10\n",
-      "1674/1674 [==============================] - 3s - loss: 0.3055 - val_loss: 0.2688\n",
-      "Epoch 2/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0895 - val_loss: 0.2594\n",
-      "Epoch 3/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0780 - val_loss: 0.2760\n",
-      "Epoch 4/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0707 - val_loss: 0.2624\n",
-      "Epoch 5/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0663 - val_loss: 0.2760\n",
-      "Epoch 6/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0613 - val_loss: 0.2769\n",
-      "Epoch 7/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0576 - val_loss: 0.2808\n",
-      "Epoch 8/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0556 - val_loss: 0.2780\n",
-      "Epoch 9/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0543 - val_loss: 0.2779\n",
-      "Epoch 10/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0497 - val_loss: 0.2891\n"
+      "Train on 1481 samples, validate on 62 samples\n",
+      "Epoch 1/20\n",
+      "1481/1481 [==============================] - 4s - loss: 0.3321 - val_loss: 0.0017\n",
+      "Epoch 2/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0973 - val_loss: 5.7974e-04\n",
+      "Epoch 3/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0924 - val_loss: 0.0012\n",
+      "Epoch 4/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0876 - val_loss: 0.0020\n",
+      "Epoch 5/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0829 - val_loss: 0.0028\n",
+      "Epoch 6/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0787 - val_loss: 0.0036\n",
+      "Epoch 7/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0750 - val_loss: 0.0043\n",
+      "Epoch 8/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0721 - val_loss: 0.0054\n",
+      "Epoch 9/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0698 - val_loss: 0.0058\n",
+      "Epoch 10/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0678 - val_loss: 0.0068\n",
+      "Epoch 11/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0663 - val_loss: 0.0069\n",
+      "Epoch 12/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0650 - val_loss: 0.0070ss: 0\n",
+      "Epoch 13/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0639 - val_loss: 0.0071\n",
+      "Epoch 14/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0629 - val_loss: 0.0074\n",
+      "Epoch 15/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0620 - val_loss: 0.0074\n",
+      "Epoch 16/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0611 - val_loss: 0.0074\n",
+      "Epoch 17/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0603 - val_loss: 0.0075\n",
+      "Epoch 18/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0596 - val_loss: 0.0073\n",
+      "Epoch 19/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0589 - val_loss: 0.0071ss: 0\n",
+      "Epoch 20/20\n",
+      "1481/1481 [==============================] - 0s - loss: 0.0583 - val_loss: 0.0070ss: 0\n"
      ]
     }
    ],
    "source": [
-    "history = model.fit(images, y_train, batch_size=64, epochs=10, validation_split=0.04)"
+    "history = model.fit(images, y_train, batch_size=64, epochs=20, validation_split=0.04)"
    ]
   },
   {
@@ -197,8 +241,8 @@
    },
    "outputs": [],
    "source": [
-    "test_images, test_labels = extract_training_data(\"Data/20171029-201639.h264.avi\", \n",
-    "                                                            \"Data/20171029-201639.h264.csv\", \n",
+    "test_images, test_labels = extract_training_data(\"Data/20171029-201949.h264.avi\", \n",
+    "                                                            \"Data/20171029-201949.h264.csv\", \n",
     "                                                            IMAGE_SIZE)\n",
     "\n",
     "prediction = model.predict(test_images)"
@@ -212,13 +256,13 @@
     {
      "data": {
       "text/plain": [
-       "array([[ 0.33686137,  0.12799484,  0.95844716],\n",
-       "       [ 0.37755403,  0.10497643,  0.94694453],\n",
-       "       [ 0.35190707,  0.11263372,  0.95089626],\n",
+       "array([[ 0.0849887 ,  0.06019423,  0.44426015],\n",
+       "       [ 0.07624771,  0.03837361,  0.388794  ],\n",
+       "       [ 0.08340696,  0.05624563,  0.43422318],\n",
        "       ..., \n",
-       "       [-0.35214299,  0.00862575,  0.98164457],\n",
-       "       [-0.32364139, -0.03065464,  1.00149977],\n",
-       "       [-0.23717432,  0.03360973,  0.98100537]], dtype=float32)"
+       "       [ 0.06778092,  0.01723751,  0.33506787],\n",
+       "       [ 0.06835382,  0.01866766,  0.33870316],\n",
+       "       [ 0.06902269,  0.0203374 ,  0.34294751]], dtype=float32)"
       ]
      },
      "execution_count": 8,
@@ -237,9 +281,9 @@
    "outputs": [
     {
      "data": {
-      "image/png": "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\npMb9L8CCs3/BGVsxAAAAAElFTkSuQmCC\n",
+      "image/png": "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\nygCQpE79L31Zh8CrJD2UAAAAAElFTkSuQmCC\n",
       "text/plain": [
-       "<matplotlib.figure.Figure at 0x12652730e48>"
+       "<matplotlib.figure.Figure at 0x29179a264e0>"
       ]
      },
      "metadata": {},
@@ -258,9 +302,9 @@
    "outputs": [
     {
      "data": {
-      "image/png": "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\nMeBSAAAAAElFTkSuQmCC\n",
+      "image/png": "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\nAABJRU5ErkJggg==\n",
       "text/plain": [
-       "<matplotlib.figure.Figure at 0x127e7edc860>"
+       "<matplotlib.figure.Figure at 0x29161b195f8>"
       ]
      },
      "metadata": {},
@@ -279,9 +323,9 @@
    "outputs": [
     {
      "data": {
-      "image/png": "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\n",
+      "image/png": "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\nQJI69f+jS7KHhyzOzgAAAABJRU5ErkJggg==\n",
       "text/plain": [
-       "<matplotlib.figure.Figure at 0x127e7c5b1d0>"
+       "<matplotlib.figure.Figure at 0x292e4e6ae48>"
       ]
      },
      "metadata": {},
@@ -302,8 +346,8 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "(942, 3)\n",
-      "(942, 3)\n"
+      "(1744, 3)\n",
+      "(1744, 3)\n"
      ]
     }
    ],
@@ -327,7 +371,7 @@
     {
      "data": {
       "text/plain": [
-       "0.1108657072559897"
+       "-0.0037522683827448202"
       ]
      },
      "execution_count": 13,
@@ -356,17 +400,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 28,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "[-0.1026516   0.04183956  0.18578287  0.29401657  0.00615382  0.17690809\n",
-      "  0.16321612  0.21082882  0.08599226  0.066355  ]\n",
-      "0.112844150141\n",
-      "0.124604190153\n"
+      "(7855,)\n",
+      "(873,)\n"
+     ]
+    },
+    {
+     "ename": "AssertionError",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
+      "\u001b[1;32m<ipython-input-28-90ef1bf8b503>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnext_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnext_split\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m \u001b[1;32massert\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;31mAssertionError\u001b[0m: "
      ]
     }
    ],
@@ -384,6 +437,15 @@
     "print(results.mean())\n",
     "print(np.median(results))"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.6.1 (C:\\Users\\Sebastian\\Anaconda3\\python.exe)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision f8a1551840823bede6bdf3c6ed171274a5b2554f)
+++ .idea/misc.xml	(date 1512586994721)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.6.1 (C:\Users\Sebastian\Anaconda3\python.exe)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.5.4 (C:\ProgramData\Anaconda3\envs\tensorflowstuff\python.exe)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: RCSnail-Conv-Dense.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Import stuff and initialize global parameters.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Using TensorFlow backend.\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import cv2\\n\",\n    \"import numpy as np\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"\\n\",\n    \"from keras.layers import Conv2D, Flatten, Dense, LSTM, \\\\\\n\",\n    \"    MaxPooling2D\\n\",\n    \"from keras.models import Sequential\\n\",\n    \"from common import extract_training_data_as_stacked\\n\",\n    \"from sklearn.metrics import explained_variance_score\\n\",\n    \"\\n\",\n    \"IMAGE_SIZE = (64, 64, 3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Convolutional network\\n\",\n    \"Reading data as bundles and creating initial model.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"images, labels = extract_training_data_as_stacked(\\\"Data/20171029-201949.h264.avi\\\", \\n\",\n    \"                                                  \\\"Data/20171029-201949.h264.csv\\\", \\n\",\n    \"                                                  IMAGE_SIZE)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(1741, 3)\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"y_train = labels.as_matrix(columns=labels.columns[1: -1])\\n\",\n    \"y_train.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"_________________________________________________________________\\n\",\n      \"Layer (type)                 Output Shape              Param #   \\n\",\n      \"=================================================================\\n\",\n      \"conv2d_1 (Conv2D)            (None, 62, 62, 32)        3488      \\n\",\n      \"_________________________________________________________________\\n\",\n      \"conv2d_2 (Conv2D)            (None, 60, 60, 32)        9248      \\n\",\n      \"_________________________________________________________________\\n\",\n      \"max_pooling2d_1 (MaxPooling2 (None, 30, 30, 32)        0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"conv2d_3 (Conv2D)            (None, 28, 28, 32)        9248      \\n\",\n      \"_________________________________________________________________\\n\",\n      \"conv2d_4 (Conv2D)            (None, 26, 26, 32)        9248      \\n\",\n      \"_________________________________________________________________\\n\",\n      \"max_pooling2d_2 (MaxPooling2 (None, 13, 13, 32)        0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"conv2d_5 (Conv2D)            (None, 11, 11, 32)        9248      \\n\",\n      \"_________________________________________________________________\\n\",\n      \"flatten_1 (Flatten)          (None, 3872)              0         \\n\",\n      \"_________________________________________________________________\\n\",\n      \"dense_1 (Dense)              (None, 3)                 11619     \\n\",\n      \"=================================================================\\n\",\n      \"Total params: 52,099\\n\",\n      \"Trainable params: 52,099\\n\",\n      \"Non-trainable params: 0\\n\",\n      \"_________________________________________________________________\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"def create_model():\\n\",\n    \"    model = Sequential()\\n\",\n    \"    model.add(Conv2D(32, (3, 3), kernel_initializer=\\\"he_normal\\\", activation='relu', input_shape=(64, 64, 12)))\\n\",\n    \"    model.add(Conv2D(32, (3, 3), kernel_initializer=\\\"he_normal\\\", activation='relu'))\\n\",\n    \"    model.add(MaxPooling2D((2, 2)))\\n\",\n    \"    model.add(Conv2D(32, (3, 3), kernel_initializer=\\\"he_normal\\\", activation='relu'))\\n\",\n    \"    model.add(Conv2D(32, (3, 3), kernel_initializer=\\\"he_normal\\\", activation='relu'))\\n\",\n    \"    model.add(MaxPooling2D((2, 2)))\\n\",\n    \"    model.add(Conv2D(32, (3, 3), kernel_initializer=\\\"he_normal\\\", activation='relu'))\\n\",\n    \"    model.add(Flatten())\\n\",\n    \"    model.add(Dense(3, activation='linear'))\\n\",\n    \"\\n\",\n    \"    model.compile(loss=\\\"mse\\\", optimizer=\\\"adam\\\")    \\n\",\n    \"    return model\\n\",\n    \"\\n\",\n    \"model = create_model()\\n\",\n    \"model.summary()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Train on 1671 samples, validate on 70 samples\\n\",\n      \"Epoch 1/10\\n\",\n      \"1671/1671 [==============================] - 33s - loss: 0.2471 - val_loss: 0.2117\\n\",\n      \"Epoch 2/10\\n\",\n      \"1671/1671 [==============================] - 33s - loss: 0.0918 - val_loss: 0.2410\\n\",\n      \"Epoch 3/10\\n\",\n      \"1671/1671 [==============================] - 34s - loss: 0.0602 - val_loss: 0.2566\\n\",\n      \"Epoch 4/10\\n\",\n      \"1671/1671 [==============================] - 29s - loss: 0.0481 - val_loss: 0.2300\\n\",\n      \"Epoch 5/10\\n\",\n      \"1671/1671 [==============================] - 31s - loss: 0.0444 - val_loss: 0.3157\\n\",\n      \"Epoch 6/10\\n\",\n      \"1671/1671 [==============================] - 32s - loss: 0.0418 - val_loss: 0.3210\\n\",\n      \"Epoch 7/10\\n\",\n      \"1671/1671 [==============================] - 29s - loss: 0.0462 - val_loss: 0.2951\\n\",\n      \"Epoch 8/10\\n\",\n      \"1671/1671 [==============================] - 35s - loss: 0.0388 - val_loss: 0.3240\\n\",\n      \"Epoch 9/10\\n\",\n      \"1671/1671 [==============================] - 31s - loss: 0.0357 - val_loss: 0.2742\\n\",\n      \"Epoch 10/10\\n\",\n      \"1671/1671 [==============================] - 31s - loss: 0.0350 - val_loss: 0.2774\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"history = model.fit(images, y_train, batch_size=64, epochs=10, validation_split=0.04)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"test_images, test_labels = extract_training_data_as_stacked(\\\"Data/20171029-201639.h264.avi\\\", \\n\",\n    \"                                                            \\\"Data/20171029-201639.h264.csv\\\", \\n\",\n    \"                                                            IMAGE_SIZE)\\n\",\n    \"\\n\",\n    \"prediction = model.predict(test_images)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Convolutional network results\\n\",\n    \"Testing prediction printout and graphs.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([[ 0.24944776,  0.07209467,  0.99610221],\\n\",\n       \"       [ 0.2271165 ,  0.05823957,  0.98477381],\\n\",\n       \"       [ 0.18884775,  0.07285262,  1.00302863],\\n\",\n       \"       ..., \\n\",\n       \"       [ 0.41753566, -0.00926144,  1.09619808],\\n\",\n       \"       [ 0.17822126, -0.12013678,  1.17476606],\\n\",\n       \"       [-0.14978045, -0.13174966,  1.00956869]], dtype=float32)\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"prediction\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x25a04a33940>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(prediction[:, 0])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAX0AAAD8CAYAAACb4nSYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAD9BJREFUeJzt3X+sZGV9x/H3p6DY+gtwL3RdVi/a\\nNRGbujS3hMSk/sBUhNbFBCw06taQrG0x1dR/1h+JtikJNlViE0u7FuJirIC/wkaoLa401qSAC0V0\\n2SKLbuW6m92rIGJtaRe//WPO6nS9MHPvzNzZ3ef9SiZzznOec853HpbPPXnumXNTVUiS2vAL0y5A\\nkrRyDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQ46fdgEAq1atqtnZ2WmXIUlH\\nlTvvvPN7VTWzlH2OiNCfnZ1lx44d0y5Dko4qSf5jqfs4vSNJDRkY+kmeluSOJF9LsjPJn3btpye5\\nPcn9Sa5P8tSu/YRufXe3fXayH0GSNKxhrvQfA15VVS8F1gPnJjkb+ABwZVWtAx4GLu36Xwo8XFW/\\nAlzZ9ZMkHQEGhn71/KhbfUr3KuBVwKe79q3ABd3yhm6dbvs5STK2iiVJyzbUnH6S45LcDRwAbgEe\\nAH5QVQe7LvPAmm55DfAgQLf9EeA5ixxzU5IdSXYsLCyM9ikkSUMZKvSr6vGqWg+cBpwFvHixbt37\\nYlf1P/eXWqpqS1XNVdXczMyS7jiSJC3Tku7eqaofAP8MnA2cmOTQLZ+nAXu75XlgLUC3/dnAQ+Mo\\nVpI0mmHu3plJcmK3/IvAq4FdwK3AhV23jcCN3fK2bp1u+5fKv8koSUeEYb6ctRrYmuQ4ej8kbqiq\\nzye5F7guyZ8D/wZc3fW/Gvh4kt30rvAvnkDdkqRlGBj6VXUPcOYi7d+iN79/ePt/AxeNpTqpM7v5\\npqmde88V50/t3NK4+Y1cSWqIoS9JDTH0Jakhhr4kNcTQl6SGGPqS1BBDX5IaYuhLUkMMfUlqiKEv\\nSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLU\\nEENfkhpi6EtSQwx9SWqIoS9JDRkY+knWJrk1ya4kO5O8vWt/f5LvJrm7e53Xt8+7kuxOcl+S10zy\\n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\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x25a5bf69da0>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(prediction[:, 1])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAXwAAAD8CAYAAAB0IB+mAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAEVJJREFUeJzt3X+MZWddx/H3x7ZQI+gWO63r7spW\\nXIRqZGnG2kii0Cq0JXGLWrKNQkMaF0hLNBFj0UTB2KQmShMSbLLSykKUUvkhG6k/6lJC+NHClG6X\\n/qB0aSsddtMdpS0QYrX16x/3rIzrdO+Z+2Pu1Of9Sm7uOc95zrnfJ7v72TPPPedMqgpJ0v9/3zPr\\nAiRJa8PAl6RGGPiS1AgDX5IaYeBLUiMMfElqhIEvSY0w8CWpEQa+JDXixFkXAHDqqafW1q1bZ12G\\nJD2j3H777f9aVXN9+6+LwN+6dSsLCwuzLkOSnlGS/Mtq+julI0mNMPAlqREGviQ1wsCXpEYY+JLU\\nCANfkhoxNPCTnJzk80nuTHJ3knd07e9N8mCS/d1re9eeJO9KcjDJgSRnTXsQkqTh+lyH/wRwblV9\\nO8lJwKeT/H237Xeq6kPH9L8A2Na9fga4tnuXJM3Q0DP8Gvh2t3pS9zreL8LdAbyv2+9WYEOSjeOX\\nKkkaR687bZOcANwO/Bjw7qq6LcmbgauS/AGwD7iyqp4ANgEPL9t9sWs7PNHKpf/ntl758Zl87kNX\\nv3omn6vp6/WlbVU9VVXbgc3A2Ul+Engb8CLgp4HnAb/bdc9Khzi2IcmuJAtJFpaWlkYqXpLU36qu\\n0qmqx4BPAudX1eFu2uYJ4C+Bs7tui8CWZbttBg6tcKzdVTVfVfNzc72f/SNJGlGfq3Tmkmzolr8X\\n+AXgy0fn5ZMEuAi4q9tlL/D67mqdc4DHq8rpHEmasT5z+BuBPd08/vcAN1bV3yX5RJI5BlM4+4E3\\ndf1vAi4EDgLfAd4w+bIlSas1NPCr6gDw0hXaz32a/gVcPn5pkqRJ8k5bSWqEgS9JjTDwJakRBr4k\\nNcLAl6RGGPiS1AgDX5IaYeBLUiMMfElqhIEvSY0w8CWpEQa+JDXCwJekRhj4ktQIA1+SGmHgS1Ij\\nDHxJaoSBL0mNMPAlqREGviQ1wsCXpEYMDfwkJyf5fJI7k9yd5B1d+xlJbktyf5IPJnlW1/7sbv1g\\nt33rdIcgSeqjzxn+E8C5VfUSYDtwfpJzgD8BrqmqbcCjwGVd/8uAR6vqx4Brun6SpBkbGvg18O1u\\n9aTuVcC5wIe69j3ARd3yjm6dbvt5STKxiiVJI+k1h5/khCT7gSPAzcBXgceq6smuyyKwqVveBDwM\\n0G1/HPjBFY65K8lCkoWlpaXxRiFJGqpX4FfVU1W1HdgMnA28eKVu3ftKZ/P1fxqqdlfVfFXNz83N\\n9a1XkjSiVV2lU1WPAZ8EzgE2JDmx27QZONQtLwJbALrtPwB8YxLFSpJG1+cqnbkkG7rl7wV+AbgX\\nuAX41a7bpcDHuuW93Trd9k9U1f85w5ckra0Th3dhI7AnyQkM/oO4sar+Lsk9wA1J/hi4A7iu638d\\n8P4kBxmc2e+cQt2SpFUaGvhVdQB46QrtDzCYzz+2/d+BiydSnSRpYrzTVpIaYeBLUiMMfElqhIEv\\nSY0w8CWpEQa+JDXCwJekRhj4ktQIA1+SGmHgS1IjDHxJaoSBL0mNMPAlqREGviQ1wsCXpEYY+JLU\\nCANfkhph4EtSIwx8SWqEgS9JjRga+Em2JLklyb1J7k7ym13725N8Pcn+7nXhsn3eluRgkvuSvGqa\\nA5Ak9XNijz5PAr9dVV9M8lzg9iQ3d9uuqao/Xd45yZnATuAngB8G/jnJC6vqqUkWLklanaFn+FV1\\nuKq+2C1/C7gX2HScXXYAN1TVE1X1IHAQOHsSxUqSRreqOfwkW4GXArd1TVckOZDk+iSndG2bgIeX\\n7bbI8f+DkCStgd6Bn+Q5wIeB36qqbwLXAi8AtgOHgT872nWF3WuF4+1KspBkYWlpadWFS5JWp1fg\\nJzmJQdj/VVV9BKCqHqmqp6rqv4C/4LvTNovAlmW7bwYOHXvMqtpdVfNVNT83NzfOGCRJPfS5SifA\\ndcC9VfXOZe0bl3V7DXBXt7wX2Jnk2UnOALYBn59cyZKkUfS5SudlwOuALyXZ37X9HnBJku0Mpmse\\nAt4IUFV3J7kRuIfBFT6Xe4WOJM3e0MCvqk+z8rz8TcfZ5yrgqjHqkiRNmHfaSlIjDHxJaoSBL0mN\\nMPAlqREGviQ1wsCXpEYY+JLUCANfkhph4EtSIwx8SWqEgS9JjTDwJakRBr4kNcLAl6RGGPiS1AgD\\nX5IaYeBLUiMMfElqhIEvSY0w8CWpEUMDP8mWJLckuTfJ3Ul+s2t/XpKbk9zfvZ/StSfJu5IcTHIg\\nyVnTHoQkabg+Z/hPAr9dVS8GzgEuT3ImcCWwr6q2Afu6dYALgG3daxdw7cSrliSt2tDAr6rDVfXF\\nbvlbwL3AJmAHsKfrtge4qFveAbyvBm4FNiTZOPHKJUmrsqo5/CRbgZcCtwGnV9VhGPynAJzWddsE\\nPLxst8WuTZI0Q70DP8lzgA8Dv1VV3zxe1xXaaoXj7UqykGRhaWmpbxmSpBH1CvwkJzEI+7+qqo90\\nzY8cnarp3o907YvAlmW7bwYOHXvMqtpdVfNVNT83Nzdq/ZKknk4c1iFJgOuAe6vqncs27QUuBa7u\\n3j+2rP2KJDcAPwM8fnTqR3om2nrlx2ddgjQRQwMfeBnwOuBLSfZ3bb/HIOhvTHIZ8DXg4m7bTcCF\\nwEHgO8AbJlqxJGkkQwO/qj7NyvPyAOet0L+Ay8esS5I0Yd5pK0mNMPAlqRF95vAlNWSWX1I/dPWr\\nZ/bZLfAMX5IaYeBLUiMMfElqhIEvSY0w8CWpEQa+JDXCwJekRhj4ktQIA1+SGmHgS1IjDHxJaoSB\\nL0mNMPAlqREGviQ1wsCXpEYY+JLUCANfkhph4EtSI4YGfpLrkxxJcteytrcn+XqS/d3rwmXb3pbk\\nYJL7krxqWoVLklanzxn+e4HzV2i/pqq2d6+bAJKcCewEfqLb58+TnDCpYiVJoxsa+FX1KeAbPY+3\\nA7ihqp6oqgeBg8DZY9QnSZqQcebwr0hyoJvyOaVr2wQ8vKzPYtcmSZqxUQP/WuAFwHbgMPBnXXtW\\n6FsrHSDJriQLSRaWlpZGLEOS1NdIgV9Vj1TVU1X1X8Bf8N1pm0Vgy7Kum4FDT3OM3VU1X1Xzc3Nz\\no5QhSVqFkQI/ycZlq68Bjl7BsxfYmeTZSc4AtgGfH69ESdIknDisQ5IPAC8HTk2yCPwh8PIk2xlM\\n1zwEvBGgqu5OciNwD/AkcHlVPTWd0iVJqzE08KvqkhWarztO/6uAq8YpSpI0ed5pK0mNMPAlqREG\\nviQ1wsCXpEYY+JLUCANfkhph4EtSIwx8SWqEgS9JjTDwJakRBr4kNcLAl6RGGPiS1AgDX5IaYeBL\\nUiMMfElqhIEvSY0w8CWpEQa+JDXCwJekRgwN/CTXJzmS5K5lbc9LcnOS+7v3U7r2JHlXkoNJDiQ5\\na5rFS5L663OG/17g/GPargT2VdU2YF+3DnABsK177QKunUyZkqRxDQ38qvoU8I1jmncAe7rlPcBF\\ny9rfVwO3AhuSbJxUsZKk0Y06h396VR0G6N5P69o3AQ8v67fYtUmSZmzSX9pmhbZasWOyK8lCkoWl\\npaUJlyFJOtaogf/I0ama7v1I174IbFnWbzNwaKUDVNXuqpqvqvm5ubkRy5Ak9TVq4O8FLu2WLwU+\\ntqz99d3VOucAjx+d+pEkzdaJwzok+QDwcuDUJIvAHwJXAzcmuQz4GnBx1/0m4ELgIPAd4A1TqFmS\\nNIKhgV9VlzzNpvNW6FvA5eMWJUmaPO+0laRGGPiS1AgDX5IaYeBLUiMMfElqhIEvSY0w8CWpEQa+\\nJDXCwJekRhj4ktQIA1+SGjH0WTrSerD1yo/PugTpGc8zfElqhIEvSY0w8CWpEQa+JDXCwJekRhj4\\nktQIA1+SGmHgS1IjDHxJasRYd9omeQj4FvAU8GRVzSd5HvBBYCvwEPDaqnp0vDIlSeOaxBn+K6pq\\ne1XNd+tXAvuqahuwr1uXJM3YNKZ0dgB7uuU9wEVT+AxJ0iqNG/gF/FOS25Ps6tpOr6rDAN37aSvt\\nmGRXkoUkC0tLS2OWIUkaZtynZb6sqg4lOQ24OcmX++5YVbuB3QDz8/M1Zh2SpCHGOsOvqkPd+xHg\\no8DZwCNJNgJ070fGLVKSNL6RAz/J9yV57tFl4JXAXcBe4NKu26XAx8YtUpI0vnGmdE4HPprk6HH+\\nuqr+IckXgBuTXAZ8Dbh4/DIlSeMaOfCr6gHgJSu0/xtw3jhFSZImz19xqFXxVw1Kz1w+WkGSGmHg\\nS1IjDHxJaoSBL0mNMPAlqRFepfMM5JUykkbhGb4kNcIz/DF4pi3pmcQzfElqhGf4ktaNWf3U/NDV\\nr57J5641z/AlqREGviQ1wsCXpEYY+JLUCANfkhph4EtSIwx8SWqEgS9JjTDwJakRUwv8JOcnuS/J\\nwSRXTutzJEn9TOXRCklOAN4N/CKwCHwhyd6qumfSn+UDzCSpn2k9S+ds4GBVPQCQ5AZgBzDxwJek\\ncc3yxHEtn+MzrSmdTcDDy9YXuzZJ0oxM6ww/K7TV/+qQ7AJ2davfTnLflGrp41TgX2f4+ZPiONYX\\nx7G+rMtx5E9WvcvycTx/NTtOK/AXgS3L1jcDh5Z3qKrdwO4pff6qJFmoqvlZ1zEux7G+OI71xXFM\\nb0rnC8C2JGckeRawE9g7pc+SJPUwlTP8qnoyyRXAPwInANdX1d3T+CxJUj9T+41XVXUTcNO0jj9h\\n62JqaQIcx/riONaX5seRqhreS5L0jOejFSSpEU0Ffp/HPSR5bZJ7ktyd5K/XusY+ho0jyTVJ9nev\\nryR5bBZ1DtNjHD+S5JYkdyQ5kOTCWdQ5TI9xPD/Jvm4Mn0yyeRZ1Hk+S65McSXLX02xPknd1YzyQ\\n5Ky1rrGPHuN4UZLPJXkiyVvXur7V6DGWX+v+LA4k+WySlww9aFU18WLw5fFXgR8FngXcCZx5TJ9t\\nwB3AKd36abOue5RxHNP/LQy+NJ957SP8eewG3twtnwk8NOu6RxzH3wCXdsvnAu+fdd0rjOPngLOA\\nu55m+4XA3zO4x+Yc4LZZ1zziOE4Dfhq4CnjrrOsdcyw/uyyrLujzZ9LSGf7/PO6hqv4DOPq4h+V+\\nA3h3VT0KUFVH1rjGPvqMY7lLgA+sSWWr02ccBXx/t/wDHHMvxzrRZxxnAvu65VtW2D5zVfUp4BvH\\n6bIDeF8N3ApsSLJxbarrb9g4qupIVX0B+M+1q2o0Pcby2aNZBdzK4H6n42op8Ps87uGFwAuTfCbJ\\nrUnOX7Pq+uv92IokzwfOAD6xBnWtVp9xvB349SSLDK74esvalLYqfcZxJ/Ar3fJrgOcm+cE1qG2S\\nfFzK+nYZg5/AjqulwB/6uAcGl6luA17O4Mz4PUk2TLmu1eozjqN2Ah+qqqemWM+o+ozjEuC9VbWZ\\nwZTC+5Ost7+zfcbxVuDnk9wB/DzwdeDJaRc2Yav5e6c1lOQVDAL/d4f1ndp1+OvQ0Mc9dH1urar/\\nBB7snu+zjcGdw+tFn3EctRO4fOoVjabPOC4Dzgeoqs8lOZnBc0TW01Rbn8eIHAJ+GSDJc4BfqarH\\n16zCyVjN3zutkSQ/BbwHuKCq/m1Y//V2tjRNfR738LfAKwCSnMpgiueBNa1yuF6PrUjy48ApwOfW\\nuL6++ozja8B5AEleDJwMLK1plcMNHUeSU5f9ZPI24Po1rnES9gKv767WOQd4vKoOz7qoliX5EeAj\\nwOuq6iu9dpr1N9Fr/K33hcBXGFxV8ftd2x8Bv9QtB3gng+f2fwnYOeuaRxlHt/524OpZ1zrmn8eZ\\nwGcYzIHvB14565pHHMevAvd3fd4DPHvWNa8whg8Ahxl8mbnI4KerNwFv6raHwS81+mr3b2N+1jWP\\nOI4f6tq/CTzWLX//rOsecSzvAR7t/m3sBxaGHdM7bSWpES1N6UhS0wx8SWqEgS9JjTDwJakRBr4k\\nNcLAl6RGGPiS1AgDX5Ia8d+4Eu7WCjWRRgAAAABJRU5ErkJggg==\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x25a5d8bb400>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(prediction[:, 2])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Result analysis\\n\",\n    \"Explained variance etc.\\n\",\n    \"\\n\",\n    \"Firstly clip incorrect values back into known bounds. Afterwards find the explained variance.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(939, 3)\\n\",\n      \"(939, 3)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"validation_labels = test_labels.as_matrix(columns=test_labels.columns[1: -1])\\n\",\n    \"clipped_prediction = np.zeros_like(prediction)\\n\",\n    \"\\n\",\n    \"clipped_prediction[:, 0] = np.clip(prediction[:, 0], -1, 1)\\n\",\n    \"clipped_prediction[:, 1] = np.clip(prediction[:, 1], 0, 1)\\n\",\n    \"clipped_prediction[:, 2] = np.clip(prediction[:, 2], 0, 1)\\n\",\n    \"\\n\",\n    \"print(validation_labels.shape)\\n\",\n    \"print(clipped_prediction.shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.10288617515064906\"\n      ]\n     },\n     \"execution_count\": 12,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"explained_variance_score(validation_labels, clipped_prediction)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## K fold cross validation\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"KeyboardInterrupt\",\n     \"evalue\": \"\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[1;31mKeyboardInterrupt\\u001b[0m                         Traceback (most recent call last)\",\n      \"\\u001b[1;32m<ipython-input-13-37a7705b57f4>\\u001b[0m in \\u001b[0;36m<module>\\u001b[1;34m()\\u001b[0m\\n\\u001b[0;32m      7\\u001b[0m \\u001b[0mtotal_y_train\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mtotal_labels\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;36m1\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m-\\u001b[0m\\u001b[1;36m1\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m      8\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m----> 9\\u001b[1;33m \\u001b[0mresults\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mrun_kfold_cross_val\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mcreate_model\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mtotal_images\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mtotal_y_train\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m     10\\u001b[0m \\u001b[0mprint\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mresults\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m     11\\u001b[0m \\u001b[0mprint\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mresults\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mmean\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mD:\\\\Dropbox\\\\1_Õppematerjalid\\\\2_Magister\\\\1_Semester\\\\Tehisnärvivõrgud\\\\Projekt\\\\common.py\\u001b[0m in \\u001b[0;36mrun_kfold_cross_val\\u001b[1;34m(build_fn, x_train, y_train, epochs, batch_size, verbose, n_splits)\\u001b[0m\\n\\u001b[0;32m    101\\u001b[0m     \\u001b[0mkfold\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mKFold\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mn_splits\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0mn_splits\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    102\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 103\\u001b[1;33m     \\u001b[1;32mreturn\\u001b[0m \\u001b[0mcross_val_score\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mmodel\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mx_train\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0my_train\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mcv\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0mkfold\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mscoring\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;34m'explained_variance'\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\model_selection\\\\_validation.py\\u001b[0m in \\u001b[0;36mcross_val_score\\u001b[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch)\\u001b[0m\\n\\u001b[0;32m    340\\u001b[0m                                 \\u001b[0mn_jobs\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0mn_jobs\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mverbose\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0mverbose\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    341\\u001b[0m                                 \\u001b[0mfit_params\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0mfit_params\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 342\\u001b[1;33m                                 pre_dispatch=pre_dispatch)\\n\\u001b[0m\\u001b[0;32m    343\\u001b[0m     \\u001b[1;32mreturn\\u001b[0m \\u001b[0mcv_results\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;34m'test_score'\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    344\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\model_selection\\\\_validation.py\\u001b[0m in \\u001b[0;36mcross_validate\\u001b[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score)\\u001b[0m\\n\\u001b[0;32m    204\\u001b[0m             \\u001b[0mfit_params\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mreturn_train_score\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0mreturn_train_score\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    205\\u001b[0m             return_times=True)\\n\\u001b[1;32m--> 206\\u001b[1;33m         for train, test in cv.split(X, y, groups))\\n\\u001b[0m\\u001b[0;32m    207\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    208\\u001b[0m     \\u001b[1;32mif\\u001b[0m \\u001b[0mreturn_train_score\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\externals\\\\joblib\\\\parallel.py\\u001b[0m in \\u001b[0;36m__call__\\u001b[1;34m(self, iterable)\\u001b[0m\\n\\u001b[0;32m    777\\u001b[0m             \\u001b[1;31m# was dispatched. In particular this covers the edge\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    778\\u001b[0m             \\u001b[1;31m# case of Parallel used with an exhausted iterator.\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 779\\u001b[1;33m             \\u001b[1;32mwhile\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mdispatch_one_batch\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0miterator\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    780\\u001b[0m                 \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0m_iterating\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[1;32mTrue\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    781\\u001b[0m             \\u001b[1;32melse\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\externals\\\\joblib\\\\parallel.py\\u001b[0m in \\u001b[0;36mdispatch_one_batch\\u001b[1;34m(self, iterator)\\u001b[0m\\n\\u001b[0;32m    623\\u001b[0m                 \\u001b[1;32mreturn\\u001b[0m \\u001b[1;32mFalse\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    624\\u001b[0m             \\u001b[1;32melse\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 625\\u001b[1;33m                 \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0m_dispatch\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mtasks\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    626\\u001b[0m                 \\u001b[1;32mreturn\\u001b[0m \\u001b[1;32mTrue\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    627\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\externals\\\\joblib\\\\parallel.py\\u001b[0m in \\u001b[0;36m_dispatch\\u001b[1;34m(self, batch)\\u001b[0m\\n\\u001b[0;32m    586\\u001b[0m         \\u001b[0mdispatch_timestamp\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mtime\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mtime\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    587\\u001b[0m         \\u001b[0mcb\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mBatchCompletionCallBack\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mdispatch_timestamp\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mlen\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mbatch\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 588\\u001b[1;33m         \\u001b[0mjob\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0m_backend\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mapply_async\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mbatch\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mcallback\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0mcb\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    589\\u001b[0m         \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0m_jobs\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mappend\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mjob\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    590\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\externals\\\\joblib\\\\_parallel_backends.py\\u001b[0m in \\u001b[0;36mapply_async\\u001b[1;34m(self, func, callback)\\u001b[0m\\n\\u001b[0;32m    109\\u001b[0m     \\u001b[1;32mdef\\u001b[0m \\u001b[0mapply_async\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mfunc\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mcallback\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;32mNone\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    110\\u001b[0m         \\u001b[1;34m\\\"\\\"\\\"Schedule a func to be run\\\"\\\"\\\"\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 111\\u001b[1;33m         \\u001b[0mresult\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mImmediateResult\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mfunc\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    112\\u001b[0m         \\u001b[1;32mif\\u001b[0m \\u001b[0mcallback\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    113\\u001b[0m             \\u001b[0mcallback\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mresult\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\externals\\\\joblib\\\\_parallel_backends.py\\u001b[0m in \\u001b[0;36m__init__\\u001b[1;34m(self, batch)\\u001b[0m\\n\\u001b[0;32m    330\\u001b[0m         \\u001b[1;31m# Don't delay the application, to avoid keeping the input\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    331\\u001b[0m         \\u001b[1;31m# arguments in memory\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 332\\u001b[1;33m         \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mresults\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mbatch\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    333\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    334\\u001b[0m     \\u001b[1;32mdef\\u001b[0m \\u001b[0mget\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\externals\\\\joblib\\\\parallel.py\\u001b[0m in \\u001b[0;36m__call__\\u001b[1;34m(self)\\u001b[0m\\n\\u001b[0;32m    129\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    130\\u001b[0m     \\u001b[1;32mdef\\u001b[0m \\u001b[0m__call__\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 131\\u001b[1;33m         \\u001b[1;32mreturn\\u001b[0m \\u001b[1;33m[\\u001b[0m\\u001b[0mfunc\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m*\\u001b[0m\\u001b[0margs\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m**\\u001b[0m\\u001b[0mkwargs\\u001b[0m\\u001b[1;33m)\\u001b[0m \\u001b[1;32mfor\\u001b[0m \\u001b[0mfunc\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0margs\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mkwargs\\u001b[0m \\u001b[1;32min\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mitems\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    132\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    133\\u001b[0m     \\u001b[1;32mdef\\u001b[0m \\u001b[0m__len__\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\externals\\\\joblib\\\\parallel.py\\u001b[0m in \\u001b[0;36m<listcomp>\\u001b[1;34m(.0)\\u001b[0m\\n\\u001b[0;32m    129\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    130\\u001b[0m     \\u001b[1;32mdef\\u001b[0m \\u001b[0m__call__\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 131\\u001b[1;33m         \\u001b[1;32mreturn\\u001b[0m \\u001b[1;33m[\\u001b[0m\\u001b[0mfunc\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m*\\u001b[0m\\u001b[0margs\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m**\\u001b[0m\\u001b[0mkwargs\\u001b[0m\\u001b[1;33m)\\u001b[0m \\u001b[1;32mfor\\u001b[0m \\u001b[0mfunc\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0margs\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mkwargs\\u001b[0m \\u001b[1;32min\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mitems\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    132\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    133\\u001b[0m     \\u001b[1;32mdef\\u001b[0m \\u001b[0m__len__\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\model_selection\\\\_validation.py\\u001b[0m in \\u001b[0;36m_fit_and_score\\u001b[1;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, error_score)\\u001b[0m\\n\\u001b[0;32m    456\\u001b[0m             \\u001b[0mestimator\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mfit\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mX_train\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m**\\u001b[0m\\u001b[0mfit_params\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    457\\u001b[0m         \\u001b[1;32melse\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 458\\u001b[1;33m             \\u001b[0mestimator\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mfit\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mX_train\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0my_train\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m**\\u001b[0m\\u001b[0mfit_params\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    459\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    460\\u001b[0m     \\u001b[1;32mexcept\\u001b[0m \\u001b[0mException\\u001b[0m \\u001b[1;32mas\\u001b[0m \\u001b[0me\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\keras\\\\wrappers\\\\scikit_learn.py\\u001b[0m in \\u001b[0;36mfit\\u001b[1;34m(self, x, y, **kwargs)\\u001b[0m\\n\\u001b[0;32m    145\\u001b[0m         \\u001b[0mfit_args\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mupdate\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mkwargs\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    146\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 147\\u001b[1;33m         \\u001b[0mhistory\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mmodel\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mfit\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mx\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0my\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m**\\u001b[0m\\u001b[0mfit_args\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    148\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    149\\u001b[0m         \\u001b[1;32mreturn\\u001b[0m \\u001b[0mhistory\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\keras\\\\models.py\\u001b[0m in \\u001b[0;36mfit\\u001b[1;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, **kwargs)\\u001b[0m\\n\\u001b[0;32m    865\\u001b[0m                               \\u001b[0mclass_weight\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0mclass_weight\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    866\\u001b[0m                               \\u001b[0msample_weight\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0msample_weight\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 867\\u001b[1;33m                               initial_epoch=initial_epoch)\\n\\u001b[0m\\u001b[0;32m    868\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    869\\u001b[0m     def evaluate(self, x, y, batch_size=32, verbose=1,\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\keras\\\\engine\\\\training.py\\u001b[0m in \\u001b[0;36mfit\\u001b[1;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)\\u001b[0m\\n\\u001b[0;32m   1596\\u001b[0m                               \\u001b[0minitial_epoch\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0minitial_epoch\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1597\\u001b[0m                               \\u001b[0msteps_per_epoch\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0msteps_per_epoch\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m-> 1598\\u001b[1;33m                               validation_steps=validation_steps)\\n\\u001b[0m\\u001b[0;32m   1599\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1600\\u001b[0m     def evaluate(self, x, y,\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\keras\\\\engine\\\\training.py\\u001b[0m in \\u001b[0;36m_fit_loop\\u001b[1;34m(self, f, ins, out_labels, batch_size, epochs, verbose, callbacks, val_f, val_ins, shuffle, callback_metrics, initial_epoch, steps_per_epoch, validation_steps)\\u001b[0m\\n\\u001b[0;32m   1181\\u001b[0m                     \\u001b[0mbatch_logs\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;34m'size'\\u001b[0m\\u001b[1;33m]\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mlen\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mbatch_ids\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1182\\u001b[0m                     \\u001b[0mcallbacks\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mon_batch_begin\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mbatch_index\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mbatch_logs\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m-> 1183\\u001b[1;33m                     \\u001b[0mouts\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mf\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mins_batch\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m   1184\\u001b[0m                     \\u001b[1;32mif\\u001b[0m \\u001b[1;32mnot\\u001b[0m \\u001b[0misinstance\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mouts\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mlist\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1185\\u001b[0m                         \\u001b[0mouts\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[1;33m[\\u001b[0m\\u001b[0mouts\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\keras\\\\backend\\\\tensorflow_backend.py\\u001b[0m in \\u001b[0;36m__call__\\u001b[1;34m(self, inputs)\\u001b[0m\\n\\u001b[0;32m   2271\\u001b[0m         updated = session.run(self.outputs + [self.updates_op],\\n\\u001b[0;32m   2272\\u001b[0m                               \\u001b[0mfeed_dict\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[0mfeed_dict\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m-> 2273\\u001b[1;33m                               **self.session_kwargs)\\n\\u001b[0m\\u001b[0;32m   2274\\u001b[0m         \\u001b[1;32mreturn\\u001b[0m \\u001b[0mupdated\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[0mlen\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0moutputs\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   2275\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\client\\\\session.py\\u001b[0m in \\u001b[0;36mrun\\u001b[1;34m(self, fetches, feed_dict, options, run_metadata)\\u001b[0m\\n\\u001b[0;32m    893\\u001b[0m     \\u001b[1;32mtry\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    894\\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\\n\\u001b[1;32m--> 895\\u001b[1;33m                          run_metadata_ptr)\\n\\u001b[0m\\u001b[0;32m    896\\u001b[0m       \\u001b[1;32mif\\u001b[0m \\u001b[0mrun_metadata\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    897\\u001b[0m         \\u001b[0mproto_data\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mtf_session\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mTF_GetBuffer\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mrun_metadata_ptr\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\client\\\\session.py\\u001b[0m in \\u001b[0;36m_run\\u001b[1;34m(self, handle, fetches, feed_dict, options, run_metadata)\\u001b[0m\\n\\u001b[0;32m   1122\\u001b[0m     \\u001b[1;32mif\\u001b[0m \\u001b[0mfinal_fetches\\u001b[0m \\u001b[1;32mor\\u001b[0m \\u001b[0mfinal_targets\\u001b[0m \\u001b[1;32mor\\u001b[0m \\u001b[1;33m(\\u001b[0m\\u001b[0mhandle\\u001b[0m \\u001b[1;32mand\\u001b[0m \\u001b[0mfeed_dict_tensor\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1123\\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\\n\\u001b[1;32m-> 1124\\u001b[1;33m                              feed_dict_tensor, options, run_metadata)\\n\\u001b[0m\\u001b[0;32m   1125\\u001b[0m     \\u001b[1;32melse\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1126\\u001b[0m       \\u001b[0mresults\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[1;33m[\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\client\\\\session.py\\u001b[0m in \\u001b[0;36m_do_run\\u001b[1;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\\u001b[0m\\n\\u001b[0;32m   1319\\u001b[0m     \\u001b[1;32mif\\u001b[0m \\u001b[0mhandle\\u001b[0m \\u001b[1;32mis\\u001b[0m \\u001b[1;32mNone\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1320\\u001b[0m       return self._do_call(_run_fn, self._session, feeds, fetches, targets,\\n\\u001b[1;32m-> 1321\\u001b[1;33m                            options, run_metadata)\\n\\u001b[0m\\u001b[0;32m   1322\\u001b[0m     \\u001b[1;32melse\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1323\\u001b[0m       \\u001b[1;32mreturn\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0m_do_call\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0m_prun_fn\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0m_session\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mhandle\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mfeeds\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mfetches\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\client\\\\session.py\\u001b[0m in \\u001b[0;36m_do_call\\u001b[1;34m(self, fn, *args)\\u001b[0m\\n\\u001b[0;32m   1325\\u001b[0m   \\u001b[1;32mdef\\u001b[0m \\u001b[0m_do_call\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mfn\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m*\\u001b[0m\\u001b[0margs\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1326\\u001b[0m     \\u001b[1;32mtry\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m-> 1327\\u001b[1;33m       \\u001b[1;32mreturn\\u001b[0m \\u001b[0mfn\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m*\\u001b[0m\\u001b[0margs\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m   1328\\u001b[0m     \\u001b[1;32mexcept\\u001b[0m \\u001b[0merrors\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mOpError\\u001b[0m \\u001b[1;32mas\\u001b[0m \\u001b[0me\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1329\\u001b[0m       \\u001b[0mmessage\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mcompat\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mas_text\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0me\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mmessage\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\tensorflow\\\\python\\\\client\\\\session.py\\u001b[0m in \\u001b[0;36m_run_fn\\u001b[1;34m(session, feed_dict, fetch_list, target_list, options, run_metadata)\\u001b[0m\\n\\u001b[0;32m   1304\\u001b[0m           return tf_session.TF_Run(session, options,\\n\\u001b[0;32m   1305\\u001b[0m                                    \\u001b[0mfeed_dict\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mfetch_list\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mtarget_list\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m-> 1306\\u001b[1;33m                                    status, run_metadata)\\n\\u001b[0m\\u001b[0;32m   1307\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   1308\\u001b[0m     \\u001b[1;32mdef\\u001b[0m \\u001b[0m_prun_fn\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0msession\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mhandle\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mfeed_dict\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mfetch_list\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;31mKeyboardInterrupt\\u001b[0m: \"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from common import run_kfold_cross_val\\n\",\n    \"\\n\",\n    \"# Concatenate both videos\\n\",\n    \"total_images = np.concatenate((images, test_images), axis=0)\\n\",\n    \"total_labels = np.concatenate((labels, test_labels), axis=0)\\n\",\n    \"\\n\",\n    \"total_y_train = total_labels[:, 1:-1]\\n\",\n    \"\\n\",\n    \"results = run_kfold_cross_val(create_model, total_images, total_y_train)\\n\",\n    \"print(results)\\n\",\n    \"print(results.mean())\\n\",\n    \"print(np.median(results))\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.6.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- RCSnail-Conv-Dense.ipynb	(revision f8a1551840823bede6bdf3c6ed171274a5b2554f)
+++ RCSnail-Conv-Dense.ipynb	(date 1512587852241)
@@ -145,25 +145,25 @@
      "text": [
       "Train on 1671 samples, validate on 70 samples\n",
       "Epoch 1/10\n",
-      "1671/1671 [==============================] - 33s - loss: 0.2471 - val_loss: 0.2117\n",
+      "1671/1671 [==============================] - 3s - loss: 0.1782 - val_loss: 0.2399\n",
       "Epoch 2/10\n",
-      "1671/1671 [==============================] - 33s - loss: 0.0918 - val_loss: 0.2410\n",
+      "1671/1671 [==============================] - 1s - loss: 0.0927 - val_loss: 0.3042\n",
       "Epoch 3/10\n",
-      "1671/1671 [==============================] - 34s - loss: 0.0602 - val_loss: 0.2566\n",
+      "1671/1671 [==============================] - 1s - loss: 0.0663 - val_loss: 0.2790\n",
       "Epoch 4/10\n",
-      "1671/1671 [==============================] - 29s - loss: 0.0481 - val_loss: 0.2300\n",
+      "1671/1671 [==============================] - 1s - loss: 0.0510 - val_loss: 0.3107\n",
       "Epoch 5/10\n",
-      "1671/1671 [==============================] - 31s - loss: 0.0444 - val_loss: 0.3157\n",
+      "1671/1671 [==============================] - 1s - loss: 0.0433 - val_loss: 0.2875\n",
       "Epoch 6/10\n",
-      "1671/1671 [==============================] - 32s - loss: 0.0418 - val_loss: 0.3210\n",
+      "1671/1671 [==============================] - 1s - loss: 0.0405 - val_loss: 0.3150\n",
       "Epoch 7/10\n",
-      "1671/1671 [==============================] - 29s - loss: 0.0462 - val_loss: 0.2951\n",
+      "1671/1671 [==============================] - 1s - loss: 0.0355 - val_loss: 0.3195\n",
       "Epoch 8/10\n",
-      "1671/1671 [==============================] - 35s - loss: 0.0388 - val_loss: 0.3240\n",
+      "1671/1671 [==============================] - 1s - loss: 0.0323 - val_loss: 0.3084\n",
       "Epoch 9/10\n",
-      "1671/1671 [==============================] - 31s - loss: 0.0357 - val_loss: 0.2742\n",
+      "1671/1671 [==============================] - 1s - loss: 0.0309 - val_loss: 0.2967\n",
       "Epoch 10/10\n",
-      "1671/1671 [==============================] - 31s - loss: 0.0350 - val_loss: 0.2774\n"
+      "1671/1671 [==============================] - 1s - loss: 0.0274 - val_loss: 0.2936\n"
      ]
     }
    ],
@@ -202,13 +202,13 @@
     {
      "data": {
       "text/plain": [
-       "array([[ 0.24944776,  0.07209467,  0.99610221],\n",
-       "       [ 0.2271165 ,  0.05823957,  0.98477381],\n",
-       "       [ 0.18884775,  0.07285262,  1.00302863],\n",
+       "array([[ 0.27461988,  0.18512271,  0.90067554],\n",
+       "       [ 0.29985702,  0.17541286,  0.89710599],\n",
+       "       [ 0.27294365,  0.17365797,  0.89785641],\n",
        "       ..., \n",
-       "       [ 0.41753566, -0.00926144,  1.09619808],\n",
-       "       [ 0.17822126, -0.12013678,  1.17476606],\n",
-       "       [-0.14978045, -0.13174966,  1.00956869]], dtype=float32)"
+       "       [ 0.49368393,  0.05138265,  1.00622284],\n",
+       "       [ 0.27540639,  0.04543146,  0.9770115 ],\n",
+       "       [ 0.29981539,  0.06130058,  0.94978231]], dtype=float32)"
       ]
      },
      "execution_count": 7,
@@ -227,9 +227,9 @@
    "outputs": [
     {
      "data": {
-      "image/png": "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\n",
+      "image/png": "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\n",
       "text/plain": [
-       "<matplotlib.figure.Figure at 0x25a04a33940>"
+       "<matplotlib.figure.Figure at 0x217290c5518>"
       ]
      },
      "metadata": {},
@@ -248,9 +248,9 @@
    "outputs": [
     {
      "data": {
-      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD8CAYAAACb4nSYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAD9BJREFUeJzt3X+sZGV9x/H3p6DY+gtwL3RdVi/a\nNRGbujS3hMSk/sBUhNbFBCw06taQrG0x1dR/1h+JtikJNlViE0u7FuJirIC/wkaoLa401qSAC0V0\n2SKLbuW6m92rIGJtaRe//WPO6nS9MHPvzNzZ3ef9SiZzznOec853HpbPPXnumXNTVUiS2vAL0y5A\nkrRyDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLUEENfkhpi6EtSQ46fdgEAq1atqtnZ2WmXIUlH\nlTvvvPN7VTWzlH2OiNCfnZ1lx44d0y5Dko4qSf5jqfs4vSNJDRkY+kmeluSOJF9LsjPJn3btpye5\nPcn9Sa5P8tSu/YRufXe3fXayH0GSNKxhrvQfA15VVS8F1gPnJjkb+ABwZVWtAx4GLu36Xwo8XFW/\nAlzZ9ZMkHQEGhn71/KhbfUr3KuBVwKe79q3ABd3yhm6dbvs5STK2iiVJyzbUnH6S45LcDRwAbgEe\nAH5QVQe7LvPAmm55DfAgQLf9EeA5ixxzU5IdSXYsLCyM9ikkSUMZKvSr6vGqWg+cBpwFvHixbt37\nYlf1P/eXWqpqS1XNVdXczMyS7jiSJC3Tku7eqaofAP8MnA2cmOTQLZ+nAXu75XlgLUC3/dnAQ+Mo\nVpI0mmHu3plJcmK3/IvAq4FdwK3AhV23jcCN3fK2bp1u+5fKv8koSUeEYb6ctRrYmuQ4ej8kbqiq\nzye5F7guyZ8D/wZc3fW/Gvh4kt30rvAvnkDdkqRlGBj6VXUPcOYi7d+iN79/ePt/AxeNpTqpM7v5\npqmde88V50/t3NK4+Y1cSWqIoS9JDTH0Jakhhr4kNcTQl6SGGPqS1BBDX5IaYuhLUkMMfUlqiKEv\nSQ0x9CWpIYa+JDXE0Jekhhj6ktQQQ1+SGmLoS1JDDH1JaoihL0kNMfQlqSGGviQ1xNCXpIYY+pLU\nEENfkhpi6EtSQwx9SWqIoS9JDRkY+knWJrk1ya4kO5O8vWt/f5LvJrm7e53Xt8+7kuxOcl+S10zy\n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\n",
+      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD8CAYAAAB5Pm/hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAD11JREFUeJzt3X+MZWV9x/H3p6xiq1ZABrrdXTto\nt4mY1MVMKYlJ/YGpCKmLCTRLU90YkrUtppr6z6pNtE1J1qZKNLG0ayEujRWoP8JGqC2uNNY/BAe6\nriyUsupWxt3sjqKItaVZ/PaPOVtvl9m5d+bOnbv7zPuV3NxznvOce77PTvjcwzPnnElVIUlq18+M\nuwBJ0mgZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGrRl3AQDnnntuTU5OjrsM\nSTqt3H///d+tqol+/U6JoJ+cnGR6enrcZUjSaSXJfwzSz6kbSWqcQS9JjTPoJalxBr0kNc6gl6TG\nGfSS1DiDXpIaZ9BLUuMMeklq3ClxZ6xOH5Pb7xzLcQ/uuGIsx5Va4Bm9JDXOoJekxhn0ktQ4g16S\nGmfQS1LjDHpJalzfoE/ynCT3Jflakv1J/qRrvyDJvUkeTXJbkmd37Wd26we67ZOjHYIkaSGDnNE/\nBby2ql4ObAIuS3IJ8AHghqraCHwfuLbrfy3w/ar6ZeCGrp8kaUz6Bn3N+VG3+qzuVcBrgU917buA\nK7vlzd063fZLk2TZKpYkLcpAc/RJzkiyFzgK3A18A/hBVR3ruswA67rldcBjAN32J4AXzvOZ25JM\nJ5menZ0dbhSSpJMaKOir6umq2gSsBy4GXjpft+59vrP3ekZD1c6qmqqqqYmJvn/EXJK0RIu66qaq\nfgD8M3AJcFaS48/KWQ8c6pZngA0A3fYXAI8vR7GSpMUb5KqbiSRndcs/C7wOeBi4B7iq67YVuKNb\n3t2t023/YlU944xekrQyBnl65VpgV5IzmPtiuL2qPpfkIeDWJH8G/CtwU9f/JuBvkxxg7kx+ywjq\nliQNqG/QV9U+4KJ52r/J3Hz9ie3/DVy9LNVJkobmnbGS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWp\ncQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn\n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\n",
       "text/plain": [
-       "<matplotlib.figure.Figure at 0x25a5bf69da0>"
+       "<matplotlib.figure.Figure at 0x2159aa182e8>"
       ]
      },
      "metadata": {},
@@ -269,9 +269,9 @@
    "outputs": [
     {
      "data": {
-      "image/png": "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\n",
+      "image/png": "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\nRU5ErkJggg==\n",
       "text/plain": [
-       "<matplotlib.figure.Figure at 0x25a5d8bb400>"
+       "<matplotlib.figure.Figure at 0x21728fb1c88>"
       ]
      },
      "metadata": {},
@@ -327,7 +327,7 @@
     {
      "data": {
       "text/plain": [
-       "0.10288617515064906"
+       "0.10090116118059296"
       ]
      },
      "execution_count": 12,
@@ -348,39 +348,16 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 14,
    "metadata": {},
    "outputs": [
     {
-     "ename": "KeyboardInterrupt",
-     "evalue": "",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
-      "\u001b[1;32m<ipython-input-13-37a7705b57f4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[0mtotal_y_train\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtotal_labels\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 9\u001b[1;33m \u001b[0mresults\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrun_kfold_cross_val\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcreate_model\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtotal_images\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtotal_y_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     10\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresults\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresults\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mD:\\Dropbox\\1_Õppematerjalid\\2_Magister\\1_Semester\\Tehisnärvivõrgud\\Projekt\\common.py\u001b[0m in \u001b[0;36mrun_kfold_cross_val\u001b[1;34m(build_fn, x_train, y_train, epochs, batch_size, verbose, n_splits)\u001b[0m\n\u001b[0;32m    101\u001b[0m     \u001b[0mkfold\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mKFold\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mn_splits\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    102\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 103\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mkfold\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'explained_variance'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch)\u001b[0m\n\u001b[0;32m    340\u001b[0m                                 \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    341\u001b[0m                                 \u001b[0mfit_params\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 342\u001b[1;33m                                 pre_dispatch=pre_dispatch)\n\u001b[0m\u001b[0;32m    343\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mcv_results\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'test_score'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    344\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\u001b[0m in \u001b[0;36mcross_validate\u001b[1;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score)\u001b[0m\n\u001b[0;32m    204\u001b[0m             \u001b[0mfit_params\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreturn_train_score\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mreturn_train_score\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    205\u001b[0m             return_times=True)\n\u001b[1;32m--> 206\u001b[1;33m         for train, test in cv.split(X, y, groups))\n\u001b[0m\u001b[0;32m    207\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    208\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mreturn_train_score\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m    777\u001b[0m             \u001b[1;31m# was dispatched. In particular this covers the edge\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    778\u001b[0m             \u001b[1;31m# case of Parallel used with an exhausted iterator.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 779\u001b[1;33m             \u001b[1;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    780\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    781\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[1;34m(self, iterator)\u001b[0m\n\u001b[0;32m    623\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    624\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 625\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    626\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    627\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    586\u001b[0m         \u001b[0mdispatch_timestamp\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    587\u001b[0m         \u001b[0mcb\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mBatchCompletionCallBack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdispatch_timestamp\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 588\u001b[1;33m         \u001b[0mjob\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    589\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    590\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[1;34m(self, func, callback)\u001b[0m\n\u001b[0;32m    109\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    110\u001b[0m         \u001b[1;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 111\u001b[1;33m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    112\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    113\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    330\u001b[0m         \u001b[1;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    331\u001b[0m         \u001b[1;31m# arguments in memory\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 332\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    333\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    334\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    129\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    130\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 131\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    132\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    133\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    129\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    130\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 131\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    132\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    133\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[1;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, error_score)\u001b[0m\n\u001b[0;32m    456\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    457\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 458\u001b[1;33m             \u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    459\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    460\u001b[0m     \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\keras\\wrappers\\scikit_learn.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, x, y, **kwargs)\u001b[0m\n\u001b[0;32m    145\u001b[0m         \u001b[0mfit_args\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    146\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 147\u001b[1;33m         \u001b[0mhistory\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_args\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    148\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    149\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mhistory\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\keras\\models.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, **kwargs)\u001b[0m\n\u001b[0;32m    865\u001b[0m                               \u001b[0mclass_weight\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    866\u001b[0m                               \u001b[0msample_weight\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 867\u001b[1;33m                               initial_epoch=initial_epoch)\n\u001b[0m\u001b[0;32m    868\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    869\u001b[0m     def evaluate(self, x, y, batch_size=32, verbose=1,\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\keras\\engine\\training.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)\u001b[0m\n\u001b[0;32m   1596\u001b[0m                               \u001b[0minitial_epoch\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0minitial_epoch\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1597\u001b[0m                               \u001b[0msteps_per_epoch\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1598\u001b[1;33m                               validation_steps=validation_steps)\n\u001b[0m\u001b[0;32m   1599\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1600\u001b[0m     def evaluate(self, x, y,\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\keras\\engine\\training.py\u001b[0m in \u001b[0;36m_fit_loop\u001b[1;34m(self, f, ins, out_labels, batch_size, epochs, verbose, callbacks, val_f, val_ins, shuffle, callback_metrics, initial_epoch, steps_per_epoch, validation_steps)\u001b[0m\n\u001b[0;32m   1181\u001b[0m                     \u001b[0mbatch_logs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'size'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbatch_ids\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1182\u001b[0m                     \u001b[0mcallbacks\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mon_batch_begin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbatch_index\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_logs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1183\u001b[1;33m                     \u001b[0mouts\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1184\u001b[0m                     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1185\u001b[0m                         \u001b[0mouts\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mouts\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, inputs)\u001b[0m\n\u001b[0;32m   2271\u001b[0m         updated = session.run(self.outputs + [self.updates_op],\n\u001b[0;32m   2272\u001b[0m                               \u001b[0mfeed_dict\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfeed_dict\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2273\u001b[1;33m                               **self.session_kwargs)\n\u001b[0m\u001b[0;32m   2274\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mupdated\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2275\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\u001b[0m in \u001b[0;36mrun\u001b[1;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[0;32m    893\u001b[0m     \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    894\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[1;32m--> 895\u001b[1;33m                          run_metadata_ptr)\n\u001b[0m\u001b[0;32m    896\u001b[0m       \u001b[1;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    897\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\u001b[0m in \u001b[0;36m_run\u001b[1;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[0;32m   1122\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m \u001b[1;32mor\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mhandle\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mfeed_dict_tensor\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1123\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[1;32m-> 1124\u001b[1;33m                              feed_dict_tensor, options, run_metadata)\n\u001b[0m\u001b[0;32m   1125\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1126\u001b[0m       \u001b[0mresults\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\u001b[0m in \u001b[0;36m_do_run\u001b[1;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[0;32m   1319\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1320\u001b[0m       return self._do_call(_run_fn, self._session, feeds, fetches, targets,\n\u001b[1;32m-> 1321\u001b[1;33m                            options, run_metadata)\n\u001b[0m\u001b[0;32m   1322\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1323\u001b[0m       \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_do_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_prun_fn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfeeds\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfetches\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\u001b[0m in \u001b[0;36m_do_call\u001b[1;34m(self, fn, *args)\u001b[0m\n\u001b[0;32m   1325\u001b[0m   \u001b[1;32mdef\u001b[0m \u001b[0m_do_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1326\u001b[0m     \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1327\u001b[1;33m       \u001b[1;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1328\u001b[0m     \u001b[1;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1329\u001b[0m       \u001b[0mmessage\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcompat\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mas_text\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0me\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmessage\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\u001b[0m in \u001b[0;36m_run_fn\u001b[1;34m(session, feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[0;32m   1304\u001b[0m           return tf_session.TF_Run(session, options,\n\u001b[0;32m   1305\u001b[0m                                    \u001b[0mfeed_dict\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1306\u001b[1;33m                                    status, run_metadata)\n\u001b[0m\u001b[0;32m   1307\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1308\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_prun_fn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msession\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[-0.08167991  0.15384866  0.26530025  0.18347301 -0.11835832]\n",
+      "0.080516735306\n",
+      "0.153848660501\n"
      ]
     }
    ],
@@ -393,7 +370,7 @@
     "\n",
     "total_y_train = total_labels[:, 1:-1]\n",
     "\n",
-    "results = run_kfold_cross_val(create_model, total_images, total_y_train)\n",
+    "results = run_kfold_cross_val(create_model, total_images, total_y_train, n_splits=5)\n",
     "print(results)\n",
     "print(results.mean())\n",
     "print(np.median(results))"
@@ -416,7 +393,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.6.1"
+   "version": "3.5.4"
   }
  },
  "nbformat": 4,
Index: RCSnail-Conv-LSTM.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Import stuff and initialize global parameters.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import cv2\\n\",\n    \"import numpy as np\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"\\n\",\n    \"from keras.layers import Conv2D, Flatten, Dense, LSTM, ConvLSTM2D, \\\\\\n\",\n    \"    MaxPooling2D\\n\",\n    \"from keras.models import Sequential\\n\",\n    \"from common import extract_training_data\\n\",\n    \"\\n\",\n    \"IMAGE_SIZE = (64, 64, 3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 2D Convolutional LSTM network\\n\",\n    \"Reading data and creating initial model.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"images, labels = extract_training_data(\\\"Data/20171029-201949.h264.avi\\\", \\n\",\n    \"                                       \\\"Data/20171029-201949.h264.csv\\\", \\n\",\n    \"                                       IMAGE_SIZE)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(1744, 3)\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"y_train = labels.as_matrix(columns=labels.columns[1: -1])\\n\",\n    \"y_train.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(1744, 64, 64, 3)\"\n      ]\n     },\n     \"execution_count\": 18,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"images.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"ValueError\",\n     \"evalue\": \"Input 0 is incompatible with layer conv_lst_m2d_14: expected ndim=5, found ndim=4\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[1;31mValueError\\u001b[0m                                Traceback (most recent call last)\",\n      \"\\u001b[1;32m<ipython-input-25-e08955b1c01e>\\u001b[0m in \\u001b[0;36m<module>\\u001b[1;34m()\\u001b[0m\\n\\u001b[0;32m      9\\u001b[0m \\u001b[1;31m#model.add(Flatten())\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m     10\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m---> 11\\u001b[1;33m \\u001b[0mmodel\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0madd\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mConvLSTM2D\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mdata_format\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;34m'channels_last'\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mfilters\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;36m32\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mkernel_size\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;36m3\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;36m3\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mreturn_sequences\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;32mFalse\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mrecurrent_activation\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;34m'relu'\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m     12\\u001b[0m \\u001b[0mmodel\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0madd\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mDense\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;36m3\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mactivation\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;34m'linear'\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m     13\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\keras\\\\models.py\\u001b[0m in \\u001b[0;36madd\\u001b[1;34m(self, layer)\\u001b[0m\\n\\u001b[0;32m    473\\u001b[0m                           output_shapes=[self.outputs[0]._keras_shape])\\n\\u001b[0;32m    474\\u001b[0m         \\u001b[1;32melse\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 475\\u001b[1;33m             \\u001b[0moutput_tensor\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mlayer\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0moutputs\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;36m0\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    476\\u001b[0m             \\u001b[1;32mif\\u001b[0m \\u001b[0misinstance\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0moutput_tensor\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mlist\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    477\\u001b[0m                 raise TypeError('All layers in a Sequential model '\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\keras\\\\layers\\\\recurrent.py\\u001b[0m in \\u001b[0;36m__call__\\u001b[1;34m(self, inputs, initial_state, **kwargs)\\u001b[0m\\n\\u001b[0;32m    266\\u001b[0m         \\u001b[1;31m# modify the input spec to include the state.\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    267\\u001b[0m         \\u001b[1;32mif\\u001b[0m \\u001b[0minitial_state\\u001b[0m \\u001b[1;32mis\\u001b[0m \\u001b[1;32mNone\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 268\\u001b[1;33m             \\u001b[1;32mreturn\\u001b[0m \\u001b[0msuper\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mRecurrent\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0m__call__\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0minputs\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m**\\u001b[0m\\u001b[0mkwargs\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    269\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    270\\u001b[0m         \\u001b[1;32mif\\u001b[0m \\u001b[1;32mnot\\u001b[0m \\u001b[0misinstance\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0minitial_state\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m(\\u001b[0m\\u001b[0mlist\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mtuple\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\keras\\\\engine\\\\topology.py\\u001b[0m in \\u001b[0;36m__call__\\u001b[1;34m(self, inputs, **kwargs)\\u001b[0m\\n\\u001b[0;32m    556\\u001b[0m                 \\u001b[1;31m# Raise exceptions in case the input is not compatible\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    557\\u001b[0m                 \\u001b[1;31m# with the input_spec specified in the layer constructor.\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 558\\u001b[1;33m                 \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0massert_input_compatibility\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0minputs\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    559\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    560\\u001b[0m                 \\u001b[1;31m# Collect input shapes to build layer.\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;32mC:\\\\Users\\\\Martin\\\\Anaconda3\\\\lib\\\\site-packages\\\\keras\\\\engine\\\\topology.py\\u001b[0m in \\u001b[0;36massert_input_compatibility\\u001b[1;34m(self, inputs)\\u001b[0m\\n\\u001b[0;32m    455\\u001b[0m                                      \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mname\\u001b[0m \\u001b[1;33m+\\u001b[0m \\u001b[1;34m': expected ndim='\\u001b[0m \\u001b[1;33m+\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    456\\u001b[0m                                      \\u001b[0mstr\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mspec\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mndim\\u001b[0m\\u001b[1;33m)\\u001b[0m \\u001b[1;33m+\\u001b[0m \\u001b[1;34m', found ndim='\\u001b[0m \\u001b[1;33m+\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 457\\u001b[1;33m                                      str(K.ndim(x)))\\n\\u001b[0m\\u001b[0;32m    458\\u001b[0m             \\u001b[1;32mif\\u001b[0m \\u001b[0mspec\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mmax_ndim\\u001b[0m \\u001b[1;32mis\\u001b[0m \\u001b[1;32mnot\\u001b[0m \\u001b[1;32mNone\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    459\\u001b[0m                 \\u001b[0mndim\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mK\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mndim\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mx\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[1;31mValueError\\u001b[0m: Input 0 is incompatible with layer conv_lst_m2d_14: expected ndim=5, found ndim=4\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from keras.layers import Permute, Reshape\\n\",\n    \"\\n\",\n    \"model = Sequential()\\n\",\n    \"\\n\",\n    \"model.add(Conv2D(32, (3, 3), kernel_initializer=\\\"he_normal\\\", activation='relu', input_shape=(64, 64, 3)))\\n\",\n    \"model.add(MaxPooling2D((2, 2)))\\n\",\n    \"\\n\",\n    \"model.add(ConvLSTM2D(data_format='channels_last', \\n\",\n    \"                     filters=32, kernel_size=(3, 3), \\n\",\n    \"                     return_sequences=False, \\n\",\n    \"                     recurrent_activation='relu'))\\n\",\n    \"model.add(Dense(3, activation='linear'))\\n\",\n    \"\\n\",\n    \"model.compile(loss=\\\"mse\\\", optimizer=\\\"adam\\\")\\n\",\n    \"model.summary()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Convolutional LSTM network results\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 60,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Train on 1674 samples, validate on 70 samples\\n\",\n      \"Epoch 1/10\\n\",\n      \"1674/1674 [==============================] - 1s - loss: 0.3213 - val_loss: 0.1518\\n\",\n      \"Epoch 2/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.1187 - val_loss: 0.2212\\n\",\n      \"Epoch 3/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0961 - val_loss: 0.2288\\n\",\n      \"Epoch 4/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0835 - val_loss: 0.2339ss: \\n\",\n      \"Epoch 5/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0719 - val_loss: 0.2456\\n\",\n      \"Epoch 6/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0645 - val_loss: 0.2534\\n\",\n      \"Epoch 7/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0602 - val_loss: 0.2648\\n\",\n      \"Epoch 8/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0568 - val_loss: 0.2703\\n\",\n      \"Epoch 9/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0542 - val_loss: 0.2785\\n\",\n      \"Epoch 10/10\\n\",\n      \"1674/1674 [==============================] - 0s - loss: 0.0531 - val_loss: 0.2774\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"history = model.fit(images, y_train, batch_size=64, epochs=10, validation_split=0.04)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 61,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"test_images, test_labels = extract_training_data(\\\"Data/20171029-201639.h264.avi\\\", \\n\",\n    \"                                                 \\\"Data/20171029-201639.h264.csv\\\", \\n\",\n    \"                                                 IMAGE_SIZE)\\n\",\n    \"\\n\",\n    \"prediction = model.predict(test_images)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 62,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([[ 0.11236326,  0.03893948,  0.98364413],\\n\",\n       \"       [ 0.10572665,  0.03254712,  0.97574234],\\n\",\n       \"       [ 0.10332077,  0.03395949,  0.97701836],\\n\",\n       \"       ..., \\n\",\n       \"       [-0.42014229, -0.01613564,  0.92864823],\\n\",\n       \"       [-0.4234415 , -0.0149938 ,  0.92871475],\\n\",\n       \"       [-0.41632813, -0.01745694,  0.9285903 ]], dtype=float32)\"\n      ]\n     },\n     \"execution_count\": 62,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"prediction\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 63,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\ngg==\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x29793c98518>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(prediction[:, 0])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 64,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\nzgAAAABJRU5ErkJggg==\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x297946e0940>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(prediction[:, 1])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 65,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\nrkJggg==\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x2979456f3c8>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(prediction[:, 2])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 66,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(942, 3)\\n\",\n      \"(942, 3)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"validation_labels = test_labels.as_matrix(columns=test_labels.columns[1: -1])\\n\",\n    \"clipped_prediction = np.zeros_like(prediction)\\n\",\n    \"\\n\",\n    \"clipped_prediction[:, 0] = np.clip(prediction[:, 0], -1, 1)\\n\",\n    \"clipped_prediction[:, 1] = np.clip(prediction[:, 1], 0, 1)\\n\",\n    \"clipped_prediction[:, 2] = np.clip(prediction[:, 2], 0, 1)\\n\",\n    \"\\n\",\n    \"print(validation_labels.shape)\\n\",\n    \"print(clipped_prediction.shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 68,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.12402683762757764\"\n      ]\n     },\n     \"execution_count\": 68,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sklearn.metrics import explained_variance_score\\n\",\n    \"explained_variance_score(validation_labels, prediction)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## K fold cross validation\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Currently the model is just a copy of what is above, defined as a function for the KerasRegressor wrapper\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"from keras.wrappers.scikit_learn import KerasRegressor\\n\",\n    \"from sklearn.model_selection import KFold, cross_val_score\\n\",\n    \"\\n\",\n    \"def create_model():\\n\",\n    \"    model = Sequential()\\n\",\n    \"    model.add(Conv2D(32, (3, 3), kernel_initializer=\\\"he_normal\\\", activation='relu', input_shape=(64, 64, 3)))\\n\",\n    \"    model.add(MaxPooling2D((2, 2)))\\n\",\n    \"    model.add(Permute((3, 2, 1)))\\n\",\n    \"    model.add(Reshape((4, 7688)))\\n\",\n    \"    model.add(LSTM(64, return_sequences=False))\\n\",\n    \"    model.add(Dense(3, activation='linear'))\\n\",\n    \"\\n\",\n    \"    model.compile(loss=\\\"mse\\\", optimizer=\\\"adam\\\")\\n\",\n    \"    \\n\",\n    \"    return model\\n\",\n    \"\\n\",\n    \"# Concatenate both videos\\n\",\n    \"total_images = np.concatenate((images, test_images), axis=0)\\n\",\n    \"total_labels = np.concatenate((labels, test_labels), axis=0)\\n\",\n    \"\\n\",\n    \"total_y_train = total_labels[:, 1:-1]\\n\",\n    \"\\n\",\n    \"model = KerasRegressor(build_fn=create_model, epochs=10, batch_size=64, verbose=0)\\n\",\n    \"kfold = KFold(n_splits=10)\\n\",\n    \"\\n\",\n    \"results = cross_val_score(model, total_images, total_y_train, cv=kfold, scoring='explained_variance')\\n\",\n    \"print(results)\\n\",\n    \"print(results.mean())\\n\",\n    \"print(np.median(results))\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.6.1\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- RCSnail-Conv-LSTM.ipynb	(revision f8a1551840823bede6bdf3c6ed171274a5b2554f)
+++ RCSnail-Conv-LSTM.ipynb	(date 1512587227063)
@@ -9,9 +9,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 1,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Using TensorFlow backend.\n"
+     ]
+    }
+   ],
    "source": [
     "import cv2\n",
     "import numpy as np\n",
@@ -36,7 +44,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 2,
    "metadata": {
     "collapsed": true
    },
@@ -49,7 +57,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [
     {
@@ -58,7 +66,7 @@
        "(1744, 3)"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -70,7 +78,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [
     {
@@ -79,7 +87,7 @@
        "(1744, 64, 64, 3)"
       ]
      },
-     "execution_count": 18,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -90,22 +98,22 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [
     {
      "ename": "ValueError",
-     "evalue": "Input 0 is incompatible with layer conv_lst_m2d_14: expected ndim=5, found ndim=4",
+     "evalue": "Input 0 is incompatible with layer conv_lst_m2d_1: expected ndim=5, found ndim=4",
      "output_type": "error",
      "traceback": [
       "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
       "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
-      "\u001b[1;32m<ipython-input-25-e08955b1c01e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[1;31m#model.add(Flatten())\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 11\u001b[1;33m \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mConvLSTM2D\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata_format\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'channels_last'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfilters\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m32\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkernel_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreturn_sequences\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrecurrent_activation\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'relu'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     12\u001b[0m \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mDense\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'linear'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\keras\\models.py\u001b[0m in \u001b[0;36madd\u001b[1;34m(self, layer)\u001b[0m\n\u001b[0;32m    473\u001b[0m                           output_shapes=[self.outputs[0]._keras_shape])\n\u001b[0;32m    474\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 475\u001b[1;33m             \u001b[0moutput_tensor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    476\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moutput_tensor\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    477\u001b[0m                 raise TypeError('All layers in a Sequential model '\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\keras\\layers\\recurrent.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, inputs, initial_state, **kwargs)\u001b[0m\n\u001b[0;32m    266\u001b[0m         \u001b[1;31m# modify the input spec to include the state.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    267\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0minitial_state\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 268\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mRecurrent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    269\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    270\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minitial_state\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\keras\\engine\\topology.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, inputs, **kwargs)\u001b[0m\n\u001b[0;32m    556\u001b[0m                 \u001b[1;31m# Raise exceptions in case the input is not compatible\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    557\u001b[0m                 \u001b[1;31m# with the input_spec specified in the layer constructor.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 558\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0massert_input_compatibility\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    559\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    560\u001b[0m                 \u001b[1;31m# Collect input shapes to build layer.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32mC:\\Users\\Martin\\Anaconda3\\lib\\site-packages\\keras\\engine\\topology.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[1;34m(self, inputs)\u001b[0m\n\u001b[0;32m    455\u001b[0m                                      \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mname\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;34m': expected ndim='\u001b[0m \u001b[1;33m+\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    456\u001b[0m                                      \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mspec\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;34m', found ndim='\u001b[0m \u001b[1;33m+\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 457\u001b[1;33m                                      str(K.ndim(x)))\n\u001b[0m\u001b[0;32m    458\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mspec\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmax_ndim\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    459\u001b[0m                 \u001b[0mndim\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mK\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;31mValueError\u001b[0m: Input 0 is incompatible with layer conv_lst_m2d_14: expected ndim=5, found ndim=4"
+      "\u001b[1;32m<ipython-input-5-22a995aae34e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      9\u001b[0m                      \u001b[0mfilters\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m32\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkernel_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m                      \u001b[0mreturn_sequences\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 11\u001b[1;33m                      recurrent_activation='relu'))\n\u001b[0m\u001b[0;32m     12\u001b[0m \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mDense\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'linear'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\tensorflowstuff\\lib\\site-packages\\keras\\models.py\u001b[0m in \u001b[0;36madd\u001b[1;34m(self, layer)\u001b[0m\n\u001b[0;32m    467\u001b[0m                           output_shapes=[self.outputs[0]._keras_shape])\n\u001b[0;32m    468\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 469\u001b[1;33m             \u001b[0moutput_tensor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    470\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moutput_tensor\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    471\u001b[0m                 raise TypeError('All layers in a Sequential model '\n",
+      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\tensorflowstuff\\lib\\site-packages\\keras\\layers\\recurrent.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, inputs, initial_state, **kwargs)\u001b[0m\n\u001b[0;32m    260\u001b[0m         \u001b[1;31m# modify the input spec to include the state.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    261\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0minitial_state\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 262\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mRecurrent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    263\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    264\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minitial_state\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\tensorflowstuff\\lib\\site-packages\\keras\\engine\\topology.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, inputs, **kwargs)\u001b[0m\n\u001b[0;32m    550\u001b[0m                 \u001b[1;31m# Raise exceptions in case the input is not compatible\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    551\u001b[0m                 \u001b[1;31m# with the input_spec specified in the layer constructor.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 552\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0massert_input_compatibility\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    553\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    554\u001b[0m                 \u001b[1;31m# Collect input shapes to build layer.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\tensorflowstuff\\lib\\site-packages\\keras\\engine\\topology.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[1;34m(self, inputs)\u001b[0m\n\u001b[0;32m    449\u001b[0m                                      \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mname\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;34m': expected ndim='\u001b[0m \u001b[1;33m+\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    450\u001b[0m                                      \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mspec\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;34m', found ndim='\u001b[0m \u001b[1;33m+\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 451\u001b[1;33m                                      str(K.ndim(x)))\n\u001b[0m\u001b[0;32m    452\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mspec\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmax_ndim\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    453\u001b[0m                 \u001b[0mndim\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mK\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;31mValueError\u001b[0m: Input 0 is incompatible with layer conv_lst_m2d_1: expected ndim=5, found ndim=4"
      ]
     }
    ],
@@ -136,44 +144,16 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 60,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Train on 1674 samples, validate on 70 samples\n",
-      "Epoch 1/10\n",
-      "1674/1674 [==============================] - 1s - loss: 0.3213 - val_loss: 0.1518\n",
-      "Epoch 2/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.1187 - val_loss: 0.2212\n",
-      "Epoch 3/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0961 - val_loss: 0.2288\n",
-      "Epoch 4/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0835 - val_loss: 0.2339ss: \n",
-      "Epoch 5/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0719 - val_loss: 0.2456\n",
-      "Epoch 6/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0645 - val_loss: 0.2534\n",
-      "Epoch 7/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0602 - val_loss: 0.2648\n",
-      "Epoch 8/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0568 - val_loss: 0.2703\n",
-      "Epoch 9/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0542 - val_loss: 0.2785\n",
-      "Epoch 10/10\n",
-      "1674/1674 [==============================] - 0s - loss: 0.0531 - val_loss: 0.2774\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "history = model.fit(images, y_train, batch_size=64, epochs=10, validation_split=0.04)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 61,
+   "execution_count": null,
    "metadata": {
     "collapsed": true
    },
@@ -188,46 +168,18 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 62,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "array([[ 0.11236326,  0.03893948,  0.98364413],\n",
-       "       [ 0.10572665,  0.03254712,  0.97574234],\n",
-       "       [ 0.10332077,  0.03395949,  0.97701836],\n",
-       "       ..., \n",
-       "       [-0.42014229, -0.01613564,  0.92864823],\n",
-       "       [-0.4234415 , -0.0149938 ,  0.92871475],\n",
-       "       [-0.41632813, -0.01745694,  0.9285903 ]], dtype=float32)"
-      ]
-     },
-     "execution_count": 62,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "prediction"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 63,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "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\ngg==\n",
-      "text/plain": [
-       "<matplotlib.figure.Figure at 0x29793c98518>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
+   "outputs": [],
    "source": [
     "plt.hist(prediction[:, 0])\n",
     "plt.show()"
@@ -235,20 +187,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 64,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "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\nzgAAAABJRU5ErkJggg==\n",
-      "text/plain": [
-       "<matplotlib.figure.Figure at 0x297946e0940>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
+   "outputs": [],
    "source": [
     "plt.hist(prediction[:, 1])\n",
     "plt.show()"
@@ -256,20 +197,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 65,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "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\nrkJggg==\n",
-      "text/plain": [
-       "<matplotlib.figure.Figure at 0x2979456f3c8>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
+   "outputs": [],
    "source": [
     "plt.hist(prediction[:, 2])\n",
     "plt.show()"
@@ -277,18 +207,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 66,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "(942, 3)\n",
-      "(942, 3)\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "validation_labels = test_labels.as_matrix(columns=test_labels.columns[1: -1])\n",
     "clipped_prediction = np.zeros_like(prediction)\n",
@@ -303,20 +224,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 68,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "0.12402683762757764"
-      ]
-     },
-     "execution_count": 68,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "from sklearn.metrics import explained_variance_score\n",
     "explained_variance_score(validation_labels, prediction)"
@@ -392,7 +302,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.6.1"
+   "version": "3.5.4"
   }
  },
  "nbformat": 4,
Index: .idea/RCSnailAI.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.6.1 (C:\\Users\\Sebastian\\Anaconda3\\python.exe)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"TestRunnerService\">\n    <option name=\"projectConfiguration\" value=\"Nosetests\" />\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"Nosetests\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/RCSnailAI.iml	(revision f8a1551840823bede6bdf3c6ed171274a5b2554f)
+++ .idea/RCSnailAI.iml	(date 1512586994844)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.6.1 (C:\Users\Sebastian\Anaconda3\python.exe)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.5.4 (C:\ProgramData\Anaconda3\envs\tensorflowstuff\python.exe)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="TestRunnerService">
Index: common.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2\nimport numpy as np\nimport pandas as pd\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import KFold, cross_val_score\n\n\ndef extract_training_data_as_stacked(filename, csv_filename, image_size=(64, 64, 3)):\n    \"\"\"\n    Read every 12th frame from input video and bundle every five frames together.\n\n    :param filename:\n    :param csv_filename:\n    :param image_size:\n    :return: images as flattened lists and training labels\n    \"\"\"\n    cap = cv2.VideoCapture(filename)\n    labels = pd.read_csv(csv_filename, sep=\"\\t\")\n\n    frame_counter = 0\n    processed_frames = []\n\n    training_images = []\n    training_label_ids = []\n    while True:\n        frame_counter += 1\n        result, frame = cap.read()\n        if result and frame_counter % 12 == 0:\n            frame = frame / 255\n            # cv2.imshow(\"img\", frame)\n            resized = cv2.resize(frame, image_size[:2])\n            processed_frames.append(resized)\n            if len(processed_frames) >= 4:\n                # cv2.imshow('frame', resized)\n\n                stacked_image = np.concatenate(processed_frames, axis=2)\n                # training_labels.append(labels[frame_counter])\n                training_images.append(stacked_image)\n                # training_images.append(processed_frames.copy())\n                training_label_ids.append(frame_counter)\n                processed_frames.pop(0)\n\n        if cv2.waitKey(1) & 0xFF == ord('q') or not result:\n            break\n\n    # When everything done, release the capture\n    cap.release()\n    cv2.destroyAllWindows()\n\n    training_images = np.array(training_images)\n    training_labels = labels.loc[training_label_ids]\n\n    assert training_images.shape[0] == training_labels.shape[0]\n    return training_images, training_labels\n\n\ndef extract_training_data(filename, csv_filename, image_size=(64, 64, 3)):\n    \"\"\"\n    Read every 12th frame from input video and output them.\n\n    :param filename:\n    :param csv_filename:\n    :param image_size:\n    :return: images as flattened lists and training labels\n    \"\"\"\n    cap = cv2.VideoCapture(filename)\n    labels = pd.read_csv(csv_filename, sep=\"\\t\")\n\n    frame_counter = 0\n    processed_frames = []\n\n    training_images = []\n    training_label_ids = []\n    while True:\n        frame_counter += 1\n        result, frame = cap.read()\n        if result and frame_counter % 12 == 0:\n            frame = frame / 255\n            # cv2.imshow(\"img\", frame)\n            resized = cv2.resize(frame, image_size[:2])\n\n            training_images.append(resized)\n            training_label_ids.append(frame_counter)\n\n        if cv2.waitKey(1) & 0xFF == ord('q') or not result:\n            break\n\n    # When everything done, release the capture\n    cap.release()\n    cv2.destroyAllWindows()\n\n    training_images = np.array(training_images)\n    training_labels = labels.loc[training_label_ids]\n\n    assert training_images.shape[0] == training_labels.shape[0]\n    return training_images, training_labels\n\n\ndef run_kfold_cross_val(build_fn, x_train, y_train, epochs=10, batch_size=64, verbose=0, n_splits=10):\n    model = KerasRegressor(build_fn=build_fn, epochs=epochs, batch_size=batch_size, verbose=verbose)\n    kfold = KFold(n_splits=n_splits)\n\n    return cross_val_score(model, x_train, y_train, cv=kfold, scoring='explained_variance')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- common.py	(revision f8a1551840823bede6bdf3c6ed171274a5b2554f)
+++ common.py	(date 1513100268659)
@@ -96,8 +96,68 @@
     return training_images, training_labels
 
 
+def extract_training_data_in_overlapping_groups(filename, csv_filename, image_size=(64, 64, 3)):
+    """
+    Read every 12th frame from input video and bundle every five frames together.
+
+    :param filename:
+    :param csv_filename:
+    :param image_size:
+    :return: images as flattened lists and training labels
+    """
+    cap = cv2.VideoCapture(filename)
+    labels = pd.read_csv(csv_filename, sep="\t")
+
+    frame_counter = 0
+    processed_frames = []
+    processed_frames_labels = []
+
+    training_images = []
+    training_labels = []
+    while True:
+        frame_counter += 1
+        result, frame = cap.read()
+        if result and frame_counter % 12 == 0:
+            frame = frame / 255
+            # cv2.imshow("img", frame)
+
+            resized = cv2.resize(frame, image_size[:2])
+            processed_frames.append(resized)
+            processed_frames_labels.append(labels.loc[frame_counter].values)
+
+            if len(processed_frames) >= 4:
+                training_images.append(processed_frames.copy())
+                training_labels.append(processed_frames_labels.copy())
+
+                processed_frames.pop(0)
+                processed_frames_labels.pop(0)
+
+        if cv2.waitKey(1) & 0xFF == ord('q') or not result:
+            break
+
+    # When everything done, release the capture
+    cap.release()
+    cv2.destroyAllWindows()
+
+    training_images = np.array(training_images)
+    training_labels = np.array(training_labels)
+
+    assert training_images.shape[0] == training_labels.shape[0]
+    return training_images, training_labels
+
+
 def run_kfold_cross_val(build_fn, x_train, y_train, epochs=10, batch_size=64, verbose=0, n_splits=10):
     model = KerasRegressor(build_fn=build_fn, epochs=epochs, batch_size=batch_size, verbose=verbose)
     kfold = KFold(n_splits=n_splits)
 
     return cross_val_score(model, x_train, y_train, cv=kfold, scoring='explained_variance')
+
+
+if __name__ == '__main__':
+    cap = cv2.VideoCapture('./Data/20171211-185037299.h264')
+    while True:
+        result, frame = cap.read()
+        cv2.imshow('img', frame)
+
+        if cv2.waitKey(1) & 0xFF == ord('q') or not result:
+            break
